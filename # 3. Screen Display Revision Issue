/*****************************************************************************
*                                                                            *
*       Source title:   AP7383X01_8INCH.CPP                                     *
*                       (xxx SHORT DESCRIPTION xxx)                          *
*         Modified by:   HyunBin Kang				             *
*   Last Modified by:   Feb/08/2022                                             *
*               Date:   Jun/17/2011                                          *
*        Current Rev:   1.30                                                 *
*                                                                            *
*        Description:   AP7383X01_8INCH EDS PROGRAM-QUAD                        *
*                                                                            *
*   Revision History:                                                        *
*                                                                            *
*     Feb/17/2011  1.00  - Original coding.                                  *
*                                                                            *
*****************************************************************************/

#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers

#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <float.h>
#include <math.h>
#include <share.h>
#include <time.h>
#include <sys/types.h>
#include <sys/timeb.h>   
#include <string.h>

#include "port500d.h"
#include "cdef500d.h"
#include "util.h"
#include "gpib500d.h"
#include "config.h"
#include "testmain.h"
#include "AP7383X01_8INCH.h"
#include "handler.h"
#include "wsUtils2.h"

/*****************************************************************************
*                                                                            *
*                         Miscellaneous (Module) #defines                    *
*                                                                            *
*****************************************************************************/
//============================================================================
// Fairchild - Bucheon - WaferSort - Variables for prober and program control functions
//
// multi-site stuff
int  siteCount;                  // number of sites the program can test
int  validSiteMap[MS_MAX_SITES]; // keep track of actively tested sites
int  site;                       // used in many functions for site stuff
int  multiDieCode;               // multi Die layout pattern (see wsUtils.h file)
//
// program and utility control stuff
int  doFullDatalog; // flag used for data collection of sample probe die
int  eopFlag=FALSE; // End Of Probe flag
int  proberStatus;  // prober control flag 
//                  // = handlerOFF, handlerMOUNTED, handlerON, handlerERROR
//
// Prober Handler Control Stuff
void sopHandlerWSME( void );    // Start Of Product
void sowHandlerWSME( void );    // Start Of Wafer
void eowHandlerWSME( void );    // End Of Wafer
void eolHandlerWSME( void );    // End Of Lot
void eopHandlerWSME( void );    // End Of Product
//
// Clean up All source (S1,S2)
void clean_up(void);
// Reset All Cbits (S1,S2)
void clean_cbits(void);
//
// program specific probe card ID function - This function is not used in Bucheon
// void measureProbeCardID(int FirstTimeFlag);
// End of Fairchild Code
//============================================================================

GLOBAL int	gSiteCount; 				// This variable is the lesser of NUM_SITES or DutSites

//## BINNING DEFINES
#define		LAST_PASS_BIN    1			//  The last pass bin 
MLOCAL int	isHndlr = NO;				// Successful-mount flag
MLOCAL int  siteMap[MS_MAX_SITES];		// For msSetSites(), mapping of enabled sites

/////////////////////////////////////////////////
RESULTS_STR iqbs1[NUM_SITES],iqbs25[NUM_SITES];
RESULTS_STR iqdd1[NUM_SITES],iqdd25[NUM_SITES];
RESULTS_STR ipbs[NUM_SITES],ipbs20[NUM_SITES];
RESULTS_STR ipdd[NUM_SITES],ipdd20[NUM_SITES];
////////////////////////////////////////////////

///////////////////////////////////////////////
///////////////////////////////////////////////
int VIN_APU_S[]={VIN_APU_S1,VIN_APU_S2};
int SD_APU_S[]={SD_APU_S1,SD_APU_S2};
int HO_APU_S[]={HO_APU_S1,HO_APU_S2};
int LO_APU_S[]={LO_APU_S1,LO_APU_S2};

int VDD_SPU100_S[]={VDD_SPU100_S1,VDD_SPU100_S2};
int VB_SPU100_S[]={VB_SPU100_S1,VB_SPU100_S2};

int VS_SPU500U_S[]={VS_SPU500U_S1,VS_SPU500U_S2};
int VS_SPU500L_S[]={VS_SPU500L_S1,VS_SPU500L_S2};

//int VS_SPU500U_SS[]={VS_SPU500U_GP,VS_SPU500U_GP}; 
//int VS_SPU500L_SS[]={VS_SPU500L_GP,VS_SPU500L_GP};

int QTMU_LO_S[]={QTMU_LO_S1,QTMU_LO_S2};
int QTMU_HO_S[]={QTMU_HO_S1,QTMU_HO_S2};

int K11_S[]={K11_S1,K11_S2};
int K12V_S[]={K12V_S1,K12V_S2};
int KHV_S[]={KHV_S1,KHV_S2};


/*****************************************************************************
*                                                                            *
*                            Local (module) variables                        *
*                                                                            *
*****************************************************************************/

//////////////////////////////////////////////////////////////////////////////
//                                                                          //
//  NOTE: The Program Flow is a structure that defines the flow of the      //
//        test program. It is defined in the "\ets\inc\testmain.h" file.    //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// CAP7383X01_8INCH
//
// The following declaration registers the test program with the test TestMain
// DLL. The value passed into the declaration specifies the Program Flow
// structure for the application. Passing in a value of ProductDatasheetFlow
// will direct the TestMain DLL to use the flow in the project's datasheet
// file.
//
CAP7383X01_8INCH theApp(ProductDatasheetFlow);

//{{AFX_ETS_PRODUCT_DATASHEET_VARIABLES
DECLARE_PDS_VARIABLE( PDS_INT, TestNmbr, "Test Number" );
DECLARE_PDS_VARIABLE( PDS_INT, SubTestNmbr, "Subtest Number" );
DECLARE_PDS_VARIABLE( PDS_CHAR, DLogDesc, "Datalog Description" );
DECLARE_PDS_VARIABLE( PDS_DOUBLE, HiLim, "High Limit" );
DECLARE_PDS_VARIABLE( PDS_DOUBLE, LoLim, "Low Limit" );
DECLARE_PDS_VARIABLE( PDS_DOUBLE, DFormat, "Data Format" );
DECLARE_PDS_VARIABLE( PDS_CHAR, Units, "Units" );
DECLARE_PDS_VARIABLE( PDS_CHAR, LoFBin, "Low Fail Bin" );
DECLARE_PDS_VARIABLE( PDS_CHAR, HiFBin, "High Fail Bin" );
//}}AFX_ETS_PRODUCT_DATASHEET_VARIABLES
/*****************************************************************************
*                                                                            *
*                           Main-support functions                           *
*                                                                            *
*****************************************************************************/
void GroupGetXoverPoints( char *dataName, int startPts, int endPts, int ncycle, double XoverValue[NUM_SITES], RESULTS_STR FirstXover[NUM_SITES], RESULTS_STR LastXover[NUM_SITES] );
void GroupGetFreq( char *dataName, int startPts, int endPts, int avgNcycle, double Freq[NUM_SITES] );
void GroupGetVrms( char *dataName, int maxpts, int rmsNcycle, RESULTS_STR rmsV[NUM_SITES] );

//////////////////////////////////////////////////////////////////////////////
//                                                                          //
//  The UserExit() function is called by the 'TestMain' module one time     //
//  near the end of test execution, before the Global variables and         //
//  Global Switches are saved.                                              //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////

BOOL CAP7383X01_8INCH::UserExit( void )
{    	
	//========================================================================
    // Fairchild - Bucheon - WaferSort - Close prober connection
    //
    if (proberStatus >= handlerMOUNTED) hclose( );  // close handler connection

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////////
//                                                                          //
//  The OnTestInit() function is called before the display of the Test      //
//  Main Menu to reinitialize the DUT and/or reinitialize any program       //
//  variables that might need to be reset.  This function will be invoked   //
//  prior to calling the first function in the progflow structure.          //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////

BOOL CAP7383X01_8INCH::OnTestInit( void )
{
	proberStatus = 2;
	//========================================================================
    // Fairchild - Bucheon - WaferSort - Screen Display
    //
 #if 1
    setOperatorLine2(proberStatus);
    if (operatorMode()) SetOperatorInstruction( 1, "*** Production Mode ***" );
    else                SetOperatorInstruction( 1, "< < <  Engineering Mode  > > >" );
    if ( engineeringMode() && (proberStatus>=handlerMOUNTED) ) 
        etsprintf("\nPress (X) to enable Test Starts from the Prober\n");
    //========================================================================
 
	 // Fairchild - Bucheon - WaferSort - Screen Display
     //

#endif

	siteMap[MS_SITE1]=GetUserSwitch(GP1);
	siteMap[MS_SITE2]=GetUserSwitch(GP2);


	msSetSites(NUM_SITES,siteMap);
	return TRUE;
}
